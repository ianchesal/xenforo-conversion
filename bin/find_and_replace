#!/usr/bin/env ruby
require 'optparse'
require_relative '../lib/xenforo/database'
require_relative '../lib/xenforo/xlogger'

start_time = Time.now
logger = Xenforo::XLogger.get_logger __FILE__

options = {
  yes: false,
  table: :xf_post,
  field: :message,
  index: :post_id
}
OptionParser.new do |opts|
  opts.banner = 'Usage: find_and_replace [--yes] <match> <regex> <replace>'

  opts.on('-y', '--yes', 'Apply changes to database') do |v|
    options[:yes] = v
  end

  opts.on('--table [TABLE]', 'Search specific table (default: xf_post)') do |v|
    options[:table] = v.to_sym
  end

  opts.on('--field [FIELD]', 'Search specific field in table (default: message)') do |v|
    options[:field] = v.to_sym
  end

  opts.on('--index [INDEX]', 'Use specific index column (default: post_id)') do |v|
    options[:index] = v.to_sym
  end
end.parse!

fail 'Missing required arguments <match> <regex> <replace>' if ARGV.count < 3

match = ARGV[0]
regex = ARGV[1]
replace = ARGV[2]

logger.info "table   = #{options[:table]}"
logger.info "field   = #{options[:field]}"
logger.info "match   = #{match}"
logger.info "regex   = #{regex}"
logger.info "replace = #{replace}"
logger.info "dryrun  = #{!options[:yes]}"

logger.info '***** DRY RUN!!! *****' unless options[:yes]

DB = Xenforo::Database.new(
  type: 'xenforo',
  logger: logger
).connect

dataset = DB[options[:table]].select(options[:index], options[:field]).where(Sequel.like(options[:field], "%#{match}%"))
logger.info "Matched #{dataset.count} records"
dataset.each do |row|
  post_id = row[options[:index]]
  info_message  = "\n"
  info_message += "Index: #{post_id}\n"
  new_message = row[options[:field]].gsub(/#{regex}/, replace)
  info_message += '> ' + row[options[:field]].split("\n").join("\n> ")
  info_message += "\n--------------------\n"
  info_message += '< ' + new_message.split("\n").join("\n< ")
  info_message += "\n"
  logger.info info_message
  logger.info "Updating post #{post_id} with new text" if options[:yes]
  dataset.where("#{options[:index]} = ?", post_id).update("#{options[:field]}": new_message) if options[:yes]
end

end_time = Time.now
logger.info '***** DRY RUN!!! *****' unless options[:yes]
logger.info "Full find and replace took #{(end_time - start_time)} seconds"
exit 0
